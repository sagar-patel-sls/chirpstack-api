// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ns/ns.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace chirpstack.ns {
  /// <summary>
  /// NetworkServerService provides the network-server API methods.
  /// </summary>
  public static partial class NetworkServerService
  {
    static readonly string __ServiceName = "ns.NetworkServerService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.CreateServiceProfileRequest> __Marshaller_ns_CreateServiceProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.CreateServiceProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.CreateServiceProfileResponse> __Marshaller_ns_CreateServiceProfileResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.CreateServiceProfileResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetServiceProfileRequest> __Marshaller_ns_GetServiceProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetServiceProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetServiceProfileResponse> __Marshaller_ns_GetServiceProfileResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetServiceProfileResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.UpdateServiceProfileRequest> __Marshaller_ns_UpdateServiceProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.UpdateServiceProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.DeleteServiceProfileRequest> __Marshaller_ns_DeleteServiceProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.DeleteServiceProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.CreateRoutingProfileRequest> __Marshaller_ns_CreateRoutingProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.CreateRoutingProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.CreateRoutingProfileResponse> __Marshaller_ns_CreateRoutingProfileResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.CreateRoutingProfileResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetRoutingProfileRequest> __Marshaller_ns_GetRoutingProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetRoutingProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetRoutingProfileResponse> __Marshaller_ns_GetRoutingProfileResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetRoutingProfileResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.UpdateRoutingProfileRequest> __Marshaller_ns_UpdateRoutingProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.UpdateRoutingProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.DeleteRoutingProfileRequest> __Marshaller_ns_DeleteRoutingProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.DeleteRoutingProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.CreateDeviceProfileRequest> __Marshaller_ns_CreateDeviceProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.CreateDeviceProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.CreateDeviceProfileResponse> __Marshaller_ns_CreateDeviceProfileResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.CreateDeviceProfileResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetDeviceProfileRequest> __Marshaller_ns_GetDeviceProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetDeviceProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetDeviceProfileResponse> __Marshaller_ns_GetDeviceProfileResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetDeviceProfileResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.UpdateDeviceProfileRequest> __Marshaller_ns_UpdateDeviceProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.UpdateDeviceProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.DeleteDeviceProfileRequest> __Marshaller_ns_DeleteDeviceProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.DeleteDeviceProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.CreateDeviceRequest> __Marshaller_ns_CreateDeviceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.CreateDeviceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetDeviceRequest> __Marshaller_ns_GetDeviceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetDeviceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetDeviceResponse> __Marshaller_ns_GetDeviceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetDeviceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.UpdateDeviceRequest> __Marshaller_ns_UpdateDeviceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.UpdateDeviceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.DeleteDeviceRequest> __Marshaller_ns_DeleteDeviceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.DeleteDeviceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.ActivateDeviceRequest> __Marshaller_ns_ActivateDeviceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.ActivateDeviceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.DeactivateDeviceRequest> __Marshaller_ns_DeactivateDeviceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.DeactivateDeviceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetDeviceActivationRequest> __Marshaller_ns_GetDeviceActivationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetDeviceActivationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetDeviceActivationResponse> __Marshaller_ns_GetDeviceActivationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetDeviceActivationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.CreateDeviceQueueItemRequest> __Marshaller_ns_CreateDeviceQueueItemRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.CreateDeviceQueueItemRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.FlushDeviceQueueForDevEUIRequest> __Marshaller_ns_FlushDeviceQueueForDevEUIRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.FlushDeviceQueueForDevEUIRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetDeviceQueueItemsForDevEUIRequest> __Marshaller_ns_GetDeviceQueueItemsForDevEUIRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetDeviceQueueItemsForDevEUIRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetDeviceQueueItemsForDevEUIResponse> __Marshaller_ns_GetDeviceQueueItemsForDevEUIResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetDeviceQueueItemsForDevEUIResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetNextDownlinkFCntForDevEUIRequest> __Marshaller_ns_GetNextDownlinkFCntForDevEUIRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetNextDownlinkFCntForDevEUIRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetNextDownlinkFCntForDevEUIResponse> __Marshaller_ns_GetNextDownlinkFCntForDevEUIResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetNextDownlinkFCntForDevEUIResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetRandomDevAddrResponse> __Marshaller_ns_GetRandomDevAddrResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetRandomDevAddrResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.CreateMACCommandQueueItemRequest> __Marshaller_ns_CreateMACCommandQueueItemRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.CreateMACCommandQueueItemRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.SendProprietaryPayloadRequest> __Marshaller_ns_SendProprietaryPayloadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.SendProprietaryPayloadRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.CreateGatewayRequest> __Marshaller_ns_CreateGatewayRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.CreateGatewayRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetGatewayRequest> __Marshaller_ns_GetGatewayRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetGatewayRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetGatewayResponse> __Marshaller_ns_GetGatewayResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetGatewayResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.UpdateGatewayRequest> __Marshaller_ns_UpdateGatewayRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.UpdateGatewayRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.DeleteGatewayRequest> __Marshaller_ns_DeleteGatewayRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.DeleteGatewayRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GenerateGatewayClientCertificateRequest> __Marshaller_ns_GenerateGatewayClientCertificateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GenerateGatewayClientCertificateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GenerateGatewayClientCertificateResponse> __Marshaller_ns_GenerateGatewayClientCertificateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GenerateGatewayClientCertificateResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.CreateGatewayProfileRequest> __Marshaller_ns_CreateGatewayProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.CreateGatewayProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.CreateGatewayProfileResponse> __Marshaller_ns_CreateGatewayProfileResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.CreateGatewayProfileResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetGatewayProfileRequest> __Marshaller_ns_GetGatewayProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetGatewayProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetGatewayProfileResponse> __Marshaller_ns_GetGatewayProfileResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetGatewayProfileResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.UpdateGatewayProfileRequest> __Marshaller_ns_UpdateGatewayProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.UpdateGatewayProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.DeleteGatewayProfileRequest> __Marshaller_ns_DeleteGatewayProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.DeleteGatewayProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetGatewayStatsRequest> __Marshaller_ns_GetGatewayStatsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetGatewayStatsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetGatewayStatsResponse> __Marshaller_ns_GetGatewayStatsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetGatewayStatsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.StreamFrameLogsForGatewayRequest> __Marshaller_ns_StreamFrameLogsForGatewayRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.StreamFrameLogsForGatewayRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.StreamFrameLogsForGatewayResponse> __Marshaller_ns_StreamFrameLogsForGatewayResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.StreamFrameLogsForGatewayResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.StreamFrameLogsForDeviceRequest> __Marshaller_ns_StreamFrameLogsForDeviceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.StreamFrameLogsForDeviceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.StreamFrameLogsForDeviceResponse> __Marshaller_ns_StreamFrameLogsForDeviceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.StreamFrameLogsForDeviceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.CreateMulticastGroupRequest> __Marshaller_ns_CreateMulticastGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.CreateMulticastGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.CreateMulticastGroupResponse> __Marshaller_ns_CreateMulticastGroupResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.CreateMulticastGroupResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetMulticastGroupRequest> __Marshaller_ns_GetMulticastGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetMulticastGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetMulticastGroupResponse> __Marshaller_ns_GetMulticastGroupResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetMulticastGroupResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.UpdateMulticastGroupRequest> __Marshaller_ns_UpdateMulticastGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.UpdateMulticastGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.DeleteMulticastGroupRequest> __Marshaller_ns_DeleteMulticastGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.DeleteMulticastGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.AddDeviceToMulticastGroupRequest> __Marshaller_ns_AddDeviceToMulticastGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.AddDeviceToMulticastGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.RemoveDeviceFromMulticastGroupRequest> __Marshaller_ns_RemoveDeviceFromMulticastGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.RemoveDeviceFromMulticastGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.EnqueueMulticastQueueItemRequest> __Marshaller_ns_EnqueueMulticastQueueItemRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.EnqueueMulticastQueueItemRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.FlushMulticastQueueForMulticastGroupRequest> __Marshaller_ns_FlushMulticastQueueForMulticastGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.FlushMulticastQueueForMulticastGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupRequest> __Marshaller_ns_GetMulticastQueueItemsForMulticastGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupResponse> __Marshaller_ns_GetMulticastQueueItemsForMulticastGroupResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetVersionResponse> __Marshaller_ns_GetVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetVersionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.GetADRAlgorithmsResponse> __Marshaller_ns_GetADRAlgorithmsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.GetADRAlgorithmsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.StreamGlobalFrameLogsForGatewayResponse> __Marshaller_ns_StreamGlobalFrameLogsForGatewayResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.StreamGlobalFrameLogsForGatewayResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.StreamGlobalFrameLogsForDeviceResponse> __Marshaller_ns_StreamGlobalFrameLogsForDeviceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.StreamGlobalFrameLogsForDeviceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::chirpstack.ns.ClearDeviceDevNonceRequest> __Marshaller_ns_ClearDeviceDevNonceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::chirpstack.ns.ClearDeviceDevNonceRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.CreateServiceProfileRequest, global::chirpstack.ns.CreateServiceProfileResponse> __Method_CreateServiceProfile = new grpc::Method<global::chirpstack.ns.CreateServiceProfileRequest, global::chirpstack.ns.CreateServiceProfileResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateServiceProfile",
        __Marshaller_ns_CreateServiceProfileRequest,
        __Marshaller_ns_CreateServiceProfileResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.GetServiceProfileRequest, global::chirpstack.ns.GetServiceProfileResponse> __Method_GetServiceProfile = new grpc::Method<global::chirpstack.ns.GetServiceProfileRequest, global::chirpstack.ns.GetServiceProfileResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceProfile",
        __Marshaller_ns_GetServiceProfileRequest,
        __Marshaller_ns_GetServiceProfileResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.UpdateServiceProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_UpdateServiceProfile = new grpc::Method<global::chirpstack.ns.UpdateServiceProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateServiceProfile",
        __Marshaller_ns_UpdateServiceProfileRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.DeleteServiceProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteServiceProfile = new grpc::Method<global::chirpstack.ns.DeleteServiceProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteServiceProfile",
        __Marshaller_ns_DeleteServiceProfileRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.CreateRoutingProfileRequest, global::chirpstack.ns.CreateRoutingProfileResponse> __Method_CreateRoutingProfile = new grpc::Method<global::chirpstack.ns.CreateRoutingProfileRequest, global::chirpstack.ns.CreateRoutingProfileResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateRoutingProfile",
        __Marshaller_ns_CreateRoutingProfileRequest,
        __Marshaller_ns_CreateRoutingProfileResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.GetRoutingProfileRequest, global::chirpstack.ns.GetRoutingProfileResponse> __Method_GetRoutingProfile = new grpc::Method<global::chirpstack.ns.GetRoutingProfileRequest, global::chirpstack.ns.GetRoutingProfileResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRoutingProfile",
        __Marshaller_ns_GetRoutingProfileRequest,
        __Marshaller_ns_GetRoutingProfileResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.UpdateRoutingProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_UpdateRoutingProfile = new grpc::Method<global::chirpstack.ns.UpdateRoutingProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateRoutingProfile",
        __Marshaller_ns_UpdateRoutingProfileRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.DeleteRoutingProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteRoutingProfile = new grpc::Method<global::chirpstack.ns.DeleteRoutingProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRoutingProfile",
        __Marshaller_ns_DeleteRoutingProfileRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.CreateDeviceProfileRequest, global::chirpstack.ns.CreateDeviceProfileResponse> __Method_CreateDeviceProfile = new grpc::Method<global::chirpstack.ns.CreateDeviceProfileRequest, global::chirpstack.ns.CreateDeviceProfileResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDeviceProfile",
        __Marshaller_ns_CreateDeviceProfileRequest,
        __Marshaller_ns_CreateDeviceProfileResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.GetDeviceProfileRequest, global::chirpstack.ns.GetDeviceProfileResponse> __Method_GetDeviceProfile = new grpc::Method<global::chirpstack.ns.GetDeviceProfileRequest, global::chirpstack.ns.GetDeviceProfileResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDeviceProfile",
        __Marshaller_ns_GetDeviceProfileRequest,
        __Marshaller_ns_GetDeviceProfileResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.UpdateDeviceProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_UpdateDeviceProfile = new grpc::Method<global::chirpstack.ns.UpdateDeviceProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDeviceProfile",
        __Marshaller_ns_UpdateDeviceProfileRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.DeleteDeviceProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteDeviceProfile = new grpc::Method<global::chirpstack.ns.DeleteDeviceProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDeviceProfile",
        __Marshaller_ns_DeleteDeviceProfileRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.CreateDeviceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CreateDevice = new grpc::Method<global::chirpstack.ns.CreateDeviceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDevice",
        __Marshaller_ns_CreateDeviceRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.GetDeviceRequest, global::chirpstack.ns.GetDeviceResponse> __Method_GetDevice = new grpc::Method<global::chirpstack.ns.GetDeviceRequest, global::chirpstack.ns.GetDeviceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDevice",
        __Marshaller_ns_GetDeviceRequest,
        __Marshaller_ns_GetDeviceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.UpdateDeviceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_UpdateDevice = new grpc::Method<global::chirpstack.ns.UpdateDeviceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDevice",
        __Marshaller_ns_UpdateDeviceRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.DeleteDeviceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteDevice = new grpc::Method<global::chirpstack.ns.DeleteDeviceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDevice",
        __Marshaller_ns_DeleteDeviceRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.ActivateDeviceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_ActivateDevice = new grpc::Method<global::chirpstack.ns.ActivateDeviceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActivateDevice",
        __Marshaller_ns_ActivateDeviceRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.DeactivateDeviceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeactivateDevice = new grpc::Method<global::chirpstack.ns.DeactivateDeviceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeactivateDevice",
        __Marshaller_ns_DeactivateDeviceRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.GetDeviceActivationRequest, global::chirpstack.ns.GetDeviceActivationResponse> __Method_GetDeviceActivation = new grpc::Method<global::chirpstack.ns.GetDeviceActivationRequest, global::chirpstack.ns.GetDeviceActivationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDeviceActivation",
        __Marshaller_ns_GetDeviceActivationRequest,
        __Marshaller_ns_GetDeviceActivationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.CreateDeviceQueueItemRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CreateDeviceQueueItem = new grpc::Method<global::chirpstack.ns.CreateDeviceQueueItemRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDeviceQueueItem",
        __Marshaller_ns_CreateDeviceQueueItemRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.FlushDeviceQueueForDevEUIRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_FlushDeviceQueueForDevEUI = new grpc::Method<global::chirpstack.ns.FlushDeviceQueueForDevEUIRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FlushDeviceQueueForDevEUI",
        __Marshaller_ns_FlushDeviceQueueForDevEUIRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.GetDeviceQueueItemsForDevEUIRequest, global::chirpstack.ns.GetDeviceQueueItemsForDevEUIResponse> __Method_GetDeviceQueueItemsForDevEUI = new grpc::Method<global::chirpstack.ns.GetDeviceQueueItemsForDevEUIRequest, global::chirpstack.ns.GetDeviceQueueItemsForDevEUIResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDeviceQueueItemsForDevEUI",
        __Marshaller_ns_GetDeviceQueueItemsForDevEUIRequest,
        __Marshaller_ns_GetDeviceQueueItemsForDevEUIResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.GetNextDownlinkFCntForDevEUIRequest, global::chirpstack.ns.GetNextDownlinkFCntForDevEUIResponse> __Method_GetNextDownlinkFCntForDevEUI = new grpc::Method<global::chirpstack.ns.GetNextDownlinkFCntForDevEUIRequest, global::chirpstack.ns.GetNextDownlinkFCntForDevEUIResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNextDownlinkFCntForDevEUI",
        __Marshaller_ns_GetNextDownlinkFCntForDevEUIRequest,
        __Marshaller_ns_GetNextDownlinkFCntForDevEUIResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::chirpstack.ns.GetRandomDevAddrResponse> __Method_GetRandomDevAddr = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::chirpstack.ns.GetRandomDevAddrResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRandomDevAddr",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_ns_GetRandomDevAddrResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.CreateMACCommandQueueItemRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CreateMACCommandQueueItem = new grpc::Method<global::chirpstack.ns.CreateMACCommandQueueItemRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateMACCommandQueueItem",
        __Marshaller_ns_CreateMACCommandQueueItemRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.SendProprietaryPayloadRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SendProprietaryPayload = new grpc::Method<global::chirpstack.ns.SendProprietaryPayloadRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendProprietaryPayload",
        __Marshaller_ns_SendProprietaryPayloadRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.CreateGatewayRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CreateGateway = new grpc::Method<global::chirpstack.ns.CreateGatewayRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateGateway",
        __Marshaller_ns_CreateGatewayRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.GetGatewayRequest, global::chirpstack.ns.GetGatewayResponse> __Method_GetGateway = new grpc::Method<global::chirpstack.ns.GetGatewayRequest, global::chirpstack.ns.GetGatewayResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGateway",
        __Marshaller_ns_GetGatewayRequest,
        __Marshaller_ns_GetGatewayResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.UpdateGatewayRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_UpdateGateway = new grpc::Method<global::chirpstack.ns.UpdateGatewayRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGateway",
        __Marshaller_ns_UpdateGatewayRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.DeleteGatewayRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteGateway = new grpc::Method<global::chirpstack.ns.DeleteGatewayRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGateway",
        __Marshaller_ns_DeleteGatewayRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.GenerateGatewayClientCertificateRequest, global::chirpstack.ns.GenerateGatewayClientCertificateResponse> __Method_GenerateGatewayClientCertificate = new grpc::Method<global::chirpstack.ns.GenerateGatewayClientCertificateRequest, global::chirpstack.ns.GenerateGatewayClientCertificateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateGatewayClientCertificate",
        __Marshaller_ns_GenerateGatewayClientCertificateRequest,
        __Marshaller_ns_GenerateGatewayClientCertificateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.CreateGatewayProfileRequest, global::chirpstack.ns.CreateGatewayProfileResponse> __Method_CreateGatewayProfile = new grpc::Method<global::chirpstack.ns.CreateGatewayProfileRequest, global::chirpstack.ns.CreateGatewayProfileResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateGatewayProfile",
        __Marshaller_ns_CreateGatewayProfileRequest,
        __Marshaller_ns_CreateGatewayProfileResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.GetGatewayProfileRequest, global::chirpstack.ns.GetGatewayProfileResponse> __Method_GetGatewayProfile = new grpc::Method<global::chirpstack.ns.GetGatewayProfileRequest, global::chirpstack.ns.GetGatewayProfileResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGatewayProfile",
        __Marshaller_ns_GetGatewayProfileRequest,
        __Marshaller_ns_GetGatewayProfileResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.UpdateGatewayProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_UpdateGatewayProfile = new grpc::Method<global::chirpstack.ns.UpdateGatewayProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGatewayProfile",
        __Marshaller_ns_UpdateGatewayProfileRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.DeleteGatewayProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteGatewayProfile = new grpc::Method<global::chirpstack.ns.DeleteGatewayProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGatewayProfile",
        __Marshaller_ns_DeleteGatewayProfileRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.GetGatewayStatsRequest, global::chirpstack.ns.GetGatewayStatsResponse> __Method_GetGatewayStats = new grpc::Method<global::chirpstack.ns.GetGatewayStatsRequest, global::chirpstack.ns.GetGatewayStatsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGatewayStats",
        __Marshaller_ns_GetGatewayStatsRequest,
        __Marshaller_ns_GetGatewayStatsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.StreamFrameLogsForGatewayRequest, global::chirpstack.ns.StreamFrameLogsForGatewayResponse> __Method_StreamFrameLogsForGateway = new grpc::Method<global::chirpstack.ns.StreamFrameLogsForGatewayRequest, global::chirpstack.ns.StreamFrameLogsForGatewayResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamFrameLogsForGateway",
        __Marshaller_ns_StreamFrameLogsForGatewayRequest,
        __Marshaller_ns_StreamFrameLogsForGatewayResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.StreamFrameLogsForDeviceRequest, global::chirpstack.ns.StreamFrameLogsForDeviceResponse> __Method_StreamFrameLogsForDevice = new grpc::Method<global::chirpstack.ns.StreamFrameLogsForDeviceRequest, global::chirpstack.ns.StreamFrameLogsForDeviceResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamFrameLogsForDevice",
        __Marshaller_ns_StreamFrameLogsForDeviceRequest,
        __Marshaller_ns_StreamFrameLogsForDeviceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.CreateMulticastGroupRequest, global::chirpstack.ns.CreateMulticastGroupResponse> __Method_CreateMulticastGroup = new grpc::Method<global::chirpstack.ns.CreateMulticastGroupRequest, global::chirpstack.ns.CreateMulticastGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateMulticastGroup",
        __Marshaller_ns_CreateMulticastGroupRequest,
        __Marshaller_ns_CreateMulticastGroupResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.GetMulticastGroupRequest, global::chirpstack.ns.GetMulticastGroupResponse> __Method_GetMulticastGroup = new grpc::Method<global::chirpstack.ns.GetMulticastGroupRequest, global::chirpstack.ns.GetMulticastGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMulticastGroup",
        __Marshaller_ns_GetMulticastGroupRequest,
        __Marshaller_ns_GetMulticastGroupResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.UpdateMulticastGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_UpdateMulticastGroup = new grpc::Method<global::chirpstack.ns.UpdateMulticastGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateMulticastGroup",
        __Marshaller_ns_UpdateMulticastGroupRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.DeleteMulticastGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteMulticastGroup = new grpc::Method<global::chirpstack.ns.DeleteMulticastGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteMulticastGroup",
        __Marshaller_ns_DeleteMulticastGroupRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.AddDeviceToMulticastGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_AddDeviceToMulticastGroup = new grpc::Method<global::chirpstack.ns.AddDeviceToMulticastGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddDeviceToMulticastGroup",
        __Marshaller_ns_AddDeviceToMulticastGroupRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.RemoveDeviceFromMulticastGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_RemoveDeviceFromMulticastGroup = new grpc::Method<global::chirpstack.ns.RemoveDeviceFromMulticastGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveDeviceFromMulticastGroup",
        __Marshaller_ns_RemoveDeviceFromMulticastGroupRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.EnqueueMulticastQueueItemRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_EnqueueMulticastQueueItem = new grpc::Method<global::chirpstack.ns.EnqueueMulticastQueueItemRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EnqueueMulticastQueueItem",
        __Marshaller_ns_EnqueueMulticastQueueItemRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.FlushMulticastQueueForMulticastGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_FlushMulticastQueueForMulticastGroup = new grpc::Method<global::chirpstack.ns.FlushMulticastQueueForMulticastGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FlushMulticastQueueForMulticastGroup",
        __Marshaller_ns_FlushMulticastQueueForMulticastGroupRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupRequest, global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupResponse> __Method_GetMulticastQueueItemsForMulticastGroup = new grpc::Method<global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupRequest, global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMulticastQueueItemsForMulticastGroup",
        __Marshaller_ns_GetMulticastQueueItemsForMulticastGroupRequest,
        __Marshaller_ns_GetMulticastQueueItemsForMulticastGroupResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::chirpstack.ns.GetVersionResponse> __Method_GetVersion = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::chirpstack.ns.GetVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVersion",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_ns_GetVersionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::chirpstack.ns.GetADRAlgorithmsResponse> __Method_GetADRAlgorithms = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::chirpstack.ns.GetADRAlgorithmsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetADRAlgorithms",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_ns_GetADRAlgorithmsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::chirpstack.ns.StreamGlobalFrameLogsForGatewayResponse> __Method_StreamGlobalFrameLogsForGateway = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::chirpstack.ns.StreamGlobalFrameLogsForGatewayResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamGlobalFrameLogsForGateway",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_ns_StreamGlobalFrameLogsForGatewayResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::chirpstack.ns.StreamGlobalFrameLogsForDeviceResponse> __Method_StreamGlobalFrameLogsForDevice = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::chirpstack.ns.StreamGlobalFrameLogsForDeviceResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamGlobalFrameLogsForDevice",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_ns_StreamGlobalFrameLogsForDeviceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::chirpstack.ns.ClearDeviceDevNonceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_ClearDeviceDevNonce = new grpc::Method<global::chirpstack.ns.ClearDeviceDevNonceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClearDeviceDevNonce",
        __Marshaller_ns_ClearDeviceDevNonceRequest,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::chirpstack.ns.NsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of NetworkServerService</summary>
    [grpc::BindServiceMethod(typeof(NetworkServerService), "BindService")]
    public abstract partial class NetworkServerServiceBase
    {
      /// <summary>
      /// CreateServiceProfile creates the given service-profile.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.CreateServiceProfileResponse> CreateServiceProfile(global::chirpstack.ns.CreateServiceProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetServiceProfile returns the service-profile matching the given id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.GetServiceProfileResponse> GetServiceProfile(global::chirpstack.ns.GetServiceProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateServiceProfile updates the given service-profile.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> UpdateServiceProfile(global::chirpstack.ns.UpdateServiceProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteServiceProfile deletes the service-profile matching the given id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceProfile(global::chirpstack.ns.DeleteServiceProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateRoutingProfile creates the given routing-profile.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.CreateRoutingProfileResponse> CreateRoutingProfile(global::chirpstack.ns.CreateRoutingProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetRoutingProfile returns the routing-profile matching the given id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.GetRoutingProfileResponse> GetRoutingProfile(global::chirpstack.ns.GetRoutingProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateRoutingProfile updates the given routing-profile.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> UpdateRoutingProfile(global::chirpstack.ns.UpdateRoutingProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteRoutingProfile deletes the routing-profile matching the given id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteRoutingProfile(global::chirpstack.ns.DeleteRoutingProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateDeviceProfile creates the given device-profile.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.CreateDeviceProfileResponse> CreateDeviceProfile(global::chirpstack.ns.CreateDeviceProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetDeviceProfile returns the device-profile matching the given id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.GetDeviceProfileResponse> GetDeviceProfile(global::chirpstack.ns.GetDeviceProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateDeviceProfile updates the given device-profile.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> UpdateDeviceProfile(global::chirpstack.ns.UpdateDeviceProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteDeviceProfile deletes the device-profile matching the given id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDeviceProfile(global::chirpstack.ns.DeleteDeviceProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateDevice creates the given device.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CreateDevice(global::chirpstack.ns.CreateDeviceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetDevice returns the device matching the given DevEUI.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.GetDeviceResponse> GetDevice(global::chirpstack.ns.GetDeviceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateDevice updates the given device.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> UpdateDevice(global::chirpstack.ns.UpdateDeviceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteDevice deletes the device matching the given DevEUI.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDevice(global::chirpstack.ns.DeleteDeviceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ActivateDevice activates a device (ABP).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> ActivateDevice(global::chirpstack.ns.ActivateDeviceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeactivateDevice de-activates a device.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeactivateDevice(global::chirpstack.ns.DeactivateDeviceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetDeviceActivation returns the device activation details.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.GetDeviceActivationResponse> GetDeviceActivation(global::chirpstack.ns.GetDeviceActivationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateDeviceQueueItem creates the given device-queue item.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CreateDeviceQueueItem(global::chirpstack.ns.CreateDeviceQueueItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// FlushDeviceQueueForDevEUI flushes the device-queue for the given DevEUI.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> FlushDeviceQueueForDevEUI(global::chirpstack.ns.FlushDeviceQueueForDevEUIRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetDeviceQueueItemsForDevEUI returns all device-queue items for the given DevEUI.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.GetDeviceQueueItemsForDevEUIResponse> GetDeviceQueueItemsForDevEUI(global::chirpstack.ns.GetDeviceQueueItemsForDevEUIRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetNextDownlinkFCntForDevEUI returns the next FCnt that must be used.
      /// This also takes device-queue items for the given DevEUI into consideration.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.GetNextDownlinkFCntForDevEUIResponse> GetNextDownlinkFCntForDevEUI(global::chirpstack.ns.GetNextDownlinkFCntForDevEUIRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.GetRandomDevAddrResponse> GetRandomDevAddr(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateMACCommandQueueItem adds the downlink mac-command to the queue.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CreateMACCommandQueueItem(global::chirpstack.ns.CreateMACCommandQueueItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SendProprietaryPayload send a payload using the 'Proprietary' LoRaWAN message-type.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> SendProprietaryPayload(global::chirpstack.ns.SendProprietaryPayloadRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateGateway creates the given gateway.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CreateGateway(global::chirpstack.ns.CreateGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetGateway returns data for a particular gateway.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.GetGatewayResponse> GetGateway(global::chirpstack.ns.GetGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateGateway updates an existing gateway.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> UpdateGateway(global::chirpstack.ns.UpdateGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteGateway deletes a gateway.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteGateway(global::chirpstack.ns.DeleteGatewayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GenerateGatewayClientCertificate returns TLS certificate gateway authentication / authorization.
      /// This endpoint can ony be used when ChirpStack Network Server is configured with a gateway
      /// CA certificate and key, which is used for signing the TLS certificate. The returned TLS
      /// certificate will have the Gateway ID as Common Name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.GenerateGatewayClientCertificateResponse> GenerateGatewayClientCertificate(global::chirpstack.ns.GenerateGatewayClientCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateGatewayProfile creates the given gateway-profile.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.CreateGatewayProfileResponse> CreateGatewayProfile(global::chirpstack.ns.CreateGatewayProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetGatewayProfile returns the gateway-profile given an id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.GetGatewayProfileResponse> GetGatewayProfile(global::chirpstack.ns.GetGatewayProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateGatewayProfile updates the given gateway-profile.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> UpdateGatewayProfile(global::chirpstack.ns.UpdateGatewayProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteGatewayProfile deletes the gateway-profile matching a given id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteGatewayProfile(global::chirpstack.ns.DeleteGatewayProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetGatewayStats returns stats of an existing gateway.
      /// Deprecated (stats are forwarded to Application Server API).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.GetGatewayStatsResponse> GetGatewayStats(global::chirpstack.ns.GetGatewayStatsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StreamFrameLogsForGateway returns a stream of frames seen by the given gateway.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamFrameLogsForGateway(global::chirpstack.ns.StreamFrameLogsForGatewayRequest request, grpc::IServerStreamWriter<global::chirpstack.ns.StreamFrameLogsForGatewayResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StreamFrameLogsForDevice returns a stream of frames seen by the given device.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamFrameLogsForDevice(global::chirpstack.ns.StreamFrameLogsForDeviceRequest request, grpc::IServerStreamWriter<global::chirpstack.ns.StreamFrameLogsForDeviceResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateMulticastGroup creates the given multicast-group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.CreateMulticastGroupResponse> CreateMulticastGroup(global::chirpstack.ns.CreateMulticastGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetMulticastGroup returns the multicast-group given an id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.GetMulticastGroupResponse> GetMulticastGroup(global::chirpstack.ns.GetMulticastGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateMulticastGroup updates the given multicast-group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> UpdateMulticastGroup(global::chirpstack.ns.UpdateMulticastGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteMulticastGroup deletes a multicast-group given an id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteMulticastGroup(global::chirpstack.ns.DeleteMulticastGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// AddDeviceToMulticastGroup adds the given device to the given multicast-group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> AddDeviceToMulticastGroup(global::chirpstack.ns.AddDeviceToMulticastGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RemoveDeviceFromMulticastGroup removes the given device from the given multicast-group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> RemoveDeviceFromMulticastGroup(global::chirpstack.ns.RemoveDeviceFromMulticastGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// EnqueueMulticastQueueItem enqueues the given multicast queue-item and
      /// increments the frame-counter after enqueueing.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> EnqueueMulticastQueueItem(global::chirpstack.ns.EnqueueMulticastQueueItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// FlushMulticastQueueForMulticastGroup flushes the multicast device-queue given a multicast-group id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> FlushMulticastQueueForMulticastGroup(global::chirpstack.ns.FlushMulticastQueueForMulticastGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetMulticastQueueItemsForMulticastGroup returns the queue-items given a multicast-group id.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupResponse> GetMulticastQueueItemsForMulticastGroup(global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetVersion returns the ChirpStack Network Server version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.GetVersionResponse> GetVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetADRAlgorithms returns the available ADR algorithms.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::chirpstack.ns.GetADRAlgorithmsResponse> GetADRAlgorithms(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StreamGlobalFrameLogsForGateway returns a stream of frames seen by the gateways.
      /// logging of uplink and downlink frames for gateways to a Redis Stream for external logging and monitoring purposes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamGlobalFrameLogsForGateway(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::IServerStreamWriter<global::chirpstack.ns.StreamGlobalFrameLogsForGatewayResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StreamGlobalFrameLogsForDevice returns a stream of frames seen by the devices.
      /// logging of uplink and downlink frames for devices to a Redis Stream for external logging and monitoring purposes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamGlobalFrameLogsForDevice(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::IServerStreamWriter<global::chirpstack.ns.StreamGlobalFrameLogsForDeviceResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ClearDeviceDevNonce clear device devnonce from activation records.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> ClearDeviceDevNonce(global::chirpstack.ns.ClearDeviceDevNonceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NetworkServerService</summary>
    public partial class NetworkServerServiceClient : grpc::ClientBase<NetworkServerServiceClient>
    {
      /// <summary>Creates a new client for NetworkServerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public NetworkServerServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NetworkServerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public NetworkServerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected NetworkServerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected NetworkServerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// CreateServiceProfile creates the given service-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.CreateServiceProfileResponse CreateServiceProfile(global::chirpstack.ns.CreateServiceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServiceProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateServiceProfile creates the given service-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.CreateServiceProfileResponse CreateServiceProfile(global::chirpstack.ns.CreateServiceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateServiceProfile, null, options, request);
      }
      /// <summary>
      /// CreateServiceProfile creates the given service-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.CreateServiceProfileResponse> CreateServiceProfileAsync(global::chirpstack.ns.CreateServiceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServiceProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateServiceProfile creates the given service-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.CreateServiceProfileResponse> CreateServiceProfileAsync(global::chirpstack.ns.CreateServiceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateServiceProfile, null, options, request);
      }
      /// <summary>
      /// GetServiceProfile returns the service-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetServiceProfileResponse GetServiceProfile(global::chirpstack.ns.GetServiceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetServiceProfile returns the service-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetServiceProfileResponse GetServiceProfile(global::chirpstack.ns.GetServiceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceProfile, null, options, request);
      }
      /// <summary>
      /// GetServiceProfile returns the service-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetServiceProfileResponse> GetServiceProfileAsync(global::chirpstack.ns.GetServiceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetServiceProfile returns the service-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetServiceProfileResponse> GetServiceProfileAsync(global::chirpstack.ns.GetServiceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceProfile, null, options, request);
      }
      /// <summary>
      /// UpdateServiceProfile updates the given service-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateServiceProfile(global::chirpstack.ns.UpdateServiceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateServiceProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateServiceProfile updates the given service-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateServiceProfile(global::chirpstack.ns.UpdateServiceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateServiceProfile, null, options, request);
      }
      /// <summary>
      /// UpdateServiceProfile updates the given service-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateServiceProfileAsync(global::chirpstack.ns.UpdateServiceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateServiceProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateServiceProfile updates the given service-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateServiceProfileAsync(global::chirpstack.ns.UpdateServiceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateServiceProfile, null, options, request);
      }
      /// <summary>
      /// DeleteServiceProfile deletes the service-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteServiceProfile(global::chirpstack.ns.DeleteServiceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServiceProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteServiceProfile deletes the service-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteServiceProfile(global::chirpstack.ns.DeleteServiceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteServiceProfile, null, options, request);
      }
      /// <summary>
      /// DeleteServiceProfile deletes the service-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceProfileAsync(global::chirpstack.ns.DeleteServiceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServiceProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteServiceProfile deletes the service-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceProfileAsync(global::chirpstack.ns.DeleteServiceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteServiceProfile, null, options, request);
      }
      /// <summary>
      /// CreateRoutingProfile creates the given routing-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.CreateRoutingProfileResponse CreateRoutingProfile(global::chirpstack.ns.CreateRoutingProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRoutingProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateRoutingProfile creates the given routing-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.CreateRoutingProfileResponse CreateRoutingProfile(global::chirpstack.ns.CreateRoutingProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRoutingProfile, null, options, request);
      }
      /// <summary>
      /// CreateRoutingProfile creates the given routing-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.CreateRoutingProfileResponse> CreateRoutingProfileAsync(global::chirpstack.ns.CreateRoutingProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRoutingProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateRoutingProfile creates the given routing-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.CreateRoutingProfileResponse> CreateRoutingProfileAsync(global::chirpstack.ns.CreateRoutingProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRoutingProfile, null, options, request);
      }
      /// <summary>
      /// GetRoutingProfile returns the routing-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetRoutingProfileResponse GetRoutingProfile(global::chirpstack.ns.GetRoutingProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRoutingProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetRoutingProfile returns the routing-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetRoutingProfileResponse GetRoutingProfile(global::chirpstack.ns.GetRoutingProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRoutingProfile, null, options, request);
      }
      /// <summary>
      /// GetRoutingProfile returns the routing-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetRoutingProfileResponse> GetRoutingProfileAsync(global::chirpstack.ns.GetRoutingProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRoutingProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetRoutingProfile returns the routing-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetRoutingProfileResponse> GetRoutingProfileAsync(global::chirpstack.ns.GetRoutingProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRoutingProfile, null, options, request);
      }
      /// <summary>
      /// UpdateRoutingProfile updates the given routing-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateRoutingProfile(global::chirpstack.ns.UpdateRoutingProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRoutingProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateRoutingProfile updates the given routing-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateRoutingProfile(global::chirpstack.ns.UpdateRoutingProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateRoutingProfile, null, options, request);
      }
      /// <summary>
      /// UpdateRoutingProfile updates the given routing-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateRoutingProfileAsync(global::chirpstack.ns.UpdateRoutingProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRoutingProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateRoutingProfile updates the given routing-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateRoutingProfileAsync(global::chirpstack.ns.UpdateRoutingProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateRoutingProfile, null, options, request);
      }
      /// <summary>
      /// DeleteRoutingProfile deletes the routing-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteRoutingProfile(global::chirpstack.ns.DeleteRoutingProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRoutingProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteRoutingProfile deletes the routing-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteRoutingProfile(global::chirpstack.ns.DeleteRoutingProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRoutingProfile, null, options, request);
      }
      /// <summary>
      /// DeleteRoutingProfile deletes the routing-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteRoutingProfileAsync(global::chirpstack.ns.DeleteRoutingProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRoutingProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteRoutingProfile deletes the routing-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteRoutingProfileAsync(global::chirpstack.ns.DeleteRoutingProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRoutingProfile, null, options, request);
      }
      /// <summary>
      /// CreateDeviceProfile creates the given device-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.CreateDeviceProfileResponse CreateDeviceProfile(global::chirpstack.ns.CreateDeviceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDeviceProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateDeviceProfile creates the given device-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.CreateDeviceProfileResponse CreateDeviceProfile(global::chirpstack.ns.CreateDeviceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDeviceProfile, null, options, request);
      }
      /// <summary>
      /// CreateDeviceProfile creates the given device-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.CreateDeviceProfileResponse> CreateDeviceProfileAsync(global::chirpstack.ns.CreateDeviceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDeviceProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateDeviceProfile creates the given device-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.CreateDeviceProfileResponse> CreateDeviceProfileAsync(global::chirpstack.ns.CreateDeviceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDeviceProfile, null, options, request);
      }
      /// <summary>
      /// GetDeviceProfile returns the device-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetDeviceProfileResponse GetDeviceProfile(global::chirpstack.ns.GetDeviceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeviceProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDeviceProfile returns the device-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetDeviceProfileResponse GetDeviceProfile(global::chirpstack.ns.GetDeviceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDeviceProfile, null, options, request);
      }
      /// <summary>
      /// GetDeviceProfile returns the device-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetDeviceProfileResponse> GetDeviceProfileAsync(global::chirpstack.ns.GetDeviceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeviceProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDeviceProfile returns the device-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetDeviceProfileResponse> GetDeviceProfileAsync(global::chirpstack.ns.GetDeviceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDeviceProfile, null, options, request);
      }
      /// <summary>
      /// UpdateDeviceProfile updates the given device-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateDeviceProfile(global::chirpstack.ns.UpdateDeviceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDeviceProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateDeviceProfile updates the given device-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateDeviceProfile(global::chirpstack.ns.UpdateDeviceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDeviceProfile, null, options, request);
      }
      /// <summary>
      /// UpdateDeviceProfile updates the given device-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateDeviceProfileAsync(global::chirpstack.ns.UpdateDeviceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDeviceProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateDeviceProfile updates the given device-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateDeviceProfileAsync(global::chirpstack.ns.UpdateDeviceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDeviceProfile, null, options, request);
      }
      /// <summary>
      /// DeleteDeviceProfile deletes the device-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDeviceProfile(global::chirpstack.ns.DeleteDeviceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDeviceProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteDeviceProfile deletes the device-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDeviceProfile(global::chirpstack.ns.DeleteDeviceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDeviceProfile, null, options, request);
      }
      /// <summary>
      /// DeleteDeviceProfile deletes the device-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDeviceProfileAsync(global::chirpstack.ns.DeleteDeviceProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDeviceProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteDeviceProfile deletes the device-profile matching the given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDeviceProfileAsync(global::chirpstack.ns.DeleteDeviceProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDeviceProfile, null, options, request);
      }
      /// <summary>
      /// CreateDevice creates the given device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CreateDevice(global::chirpstack.ns.CreateDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateDevice creates the given device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CreateDevice(global::chirpstack.ns.CreateDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDevice, null, options, request);
      }
      /// <summary>
      /// CreateDevice creates the given device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CreateDeviceAsync(global::chirpstack.ns.CreateDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDeviceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateDevice creates the given device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CreateDeviceAsync(global::chirpstack.ns.CreateDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDevice, null, options, request);
      }
      /// <summary>
      /// GetDevice returns the device matching the given DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetDeviceResponse GetDevice(global::chirpstack.ns.GetDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDevice returns the device matching the given DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetDeviceResponse GetDevice(global::chirpstack.ns.GetDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDevice, null, options, request);
      }
      /// <summary>
      /// GetDevice returns the device matching the given DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetDeviceResponse> GetDeviceAsync(global::chirpstack.ns.GetDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeviceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDevice returns the device matching the given DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetDeviceResponse> GetDeviceAsync(global::chirpstack.ns.GetDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDevice, null, options, request);
      }
      /// <summary>
      /// UpdateDevice updates the given device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateDevice(global::chirpstack.ns.UpdateDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateDevice updates the given device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateDevice(global::chirpstack.ns.UpdateDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDevice, null, options, request);
      }
      /// <summary>
      /// UpdateDevice updates the given device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateDeviceAsync(global::chirpstack.ns.UpdateDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDeviceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateDevice updates the given device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateDeviceAsync(global::chirpstack.ns.UpdateDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDevice, null, options, request);
      }
      /// <summary>
      /// DeleteDevice deletes the device matching the given DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDevice(global::chirpstack.ns.DeleteDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteDevice deletes the device matching the given DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDevice(global::chirpstack.ns.DeleteDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDevice, null, options, request);
      }
      /// <summary>
      /// DeleteDevice deletes the device matching the given DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDeviceAsync(global::chirpstack.ns.DeleteDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDeviceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteDevice deletes the device matching the given DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDeviceAsync(global::chirpstack.ns.DeleteDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDevice, null, options, request);
      }
      /// <summary>
      /// ActivateDevice activates a device (ABP).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ActivateDevice(global::chirpstack.ns.ActivateDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ActivateDevice activates a device (ABP).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ActivateDevice(global::chirpstack.ns.ActivateDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActivateDevice, null, options, request);
      }
      /// <summary>
      /// ActivateDevice activates a device (ABP).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ActivateDeviceAsync(global::chirpstack.ns.ActivateDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateDeviceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ActivateDevice activates a device (ABP).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ActivateDeviceAsync(global::chirpstack.ns.ActivateDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActivateDevice, null, options, request);
      }
      /// <summary>
      /// DeactivateDevice de-activates a device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeactivateDevice(global::chirpstack.ns.DeactivateDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeactivateDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeactivateDevice de-activates a device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeactivateDevice(global::chirpstack.ns.DeactivateDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeactivateDevice, null, options, request);
      }
      /// <summary>
      /// DeactivateDevice de-activates a device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeactivateDeviceAsync(global::chirpstack.ns.DeactivateDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeactivateDeviceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeactivateDevice de-activates a device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeactivateDeviceAsync(global::chirpstack.ns.DeactivateDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeactivateDevice, null, options, request);
      }
      /// <summary>
      /// GetDeviceActivation returns the device activation details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetDeviceActivationResponse GetDeviceActivation(global::chirpstack.ns.GetDeviceActivationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeviceActivation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDeviceActivation returns the device activation details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetDeviceActivationResponse GetDeviceActivation(global::chirpstack.ns.GetDeviceActivationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDeviceActivation, null, options, request);
      }
      /// <summary>
      /// GetDeviceActivation returns the device activation details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetDeviceActivationResponse> GetDeviceActivationAsync(global::chirpstack.ns.GetDeviceActivationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeviceActivationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDeviceActivation returns the device activation details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetDeviceActivationResponse> GetDeviceActivationAsync(global::chirpstack.ns.GetDeviceActivationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDeviceActivation, null, options, request);
      }
      /// <summary>
      /// CreateDeviceQueueItem creates the given device-queue item.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CreateDeviceQueueItem(global::chirpstack.ns.CreateDeviceQueueItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDeviceQueueItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateDeviceQueueItem creates the given device-queue item.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CreateDeviceQueueItem(global::chirpstack.ns.CreateDeviceQueueItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDeviceQueueItem, null, options, request);
      }
      /// <summary>
      /// CreateDeviceQueueItem creates the given device-queue item.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CreateDeviceQueueItemAsync(global::chirpstack.ns.CreateDeviceQueueItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDeviceQueueItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateDeviceQueueItem creates the given device-queue item.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CreateDeviceQueueItemAsync(global::chirpstack.ns.CreateDeviceQueueItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDeviceQueueItem, null, options, request);
      }
      /// <summary>
      /// FlushDeviceQueueForDevEUI flushes the device-queue for the given DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty FlushDeviceQueueForDevEUI(global::chirpstack.ns.FlushDeviceQueueForDevEUIRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FlushDeviceQueueForDevEUI(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FlushDeviceQueueForDevEUI flushes the device-queue for the given DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty FlushDeviceQueueForDevEUI(global::chirpstack.ns.FlushDeviceQueueForDevEUIRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FlushDeviceQueueForDevEUI, null, options, request);
      }
      /// <summary>
      /// FlushDeviceQueueForDevEUI flushes the device-queue for the given DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> FlushDeviceQueueForDevEUIAsync(global::chirpstack.ns.FlushDeviceQueueForDevEUIRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FlushDeviceQueueForDevEUIAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FlushDeviceQueueForDevEUI flushes the device-queue for the given DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> FlushDeviceQueueForDevEUIAsync(global::chirpstack.ns.FlushDeviceQueueForDevEUIRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FlushDeviceQueueForDevEUI, null, options, request);
      }
      /// <summary>
      /// GetDeviceQueueItemsForDevEUI returns all device-queue items for the given DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetDeviceQueueItemsForDevEUIResponse GetDeviceQueueItemsForDevEUI(global::chirpstack.ns.GetDeviceQueueItemsForDevEUIRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeviceQueueItemsForDevEUI(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDeviceQueueItemsForDevEUI returns all device-queue items for the given DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetDeviceQueueItemsForDevEUIResponse GetDeviceQueueItemsForDevEUI(global::chirpstack.ns.GetDeviceQueueItemsForDevEUIRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDeviceQueueItemsForDevEUI, null, options, request);
      }
      /// <summary>
      /// GetDeviceQueueItemsForDevEUI returns all device-queue items for the given DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetDeviceQueueItemsForDevEUIResponse> GetDeviceQueueItemsForDevEUIAsync(global::chirpstack.ns.GetDeviceQueueItemsForDevEUIRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeviceQueueItemsForDevEUIAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDeviceQueueItemsForDevEUI returns all device-queue items for the given DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetDeviceQueueItemsForDevEUIResponse> GetDeviceQueueItemsForDevEUIAsync(global::chirpstack.ns.GetDeviceQueueItemsForDevEUIRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDeviceQueueItemsForDevEUI, null, options, request);
      }
      /// <summary>
      /// GetNextDownlinkFCntForDevEUI returns the next FCnt that must be used.
      /// This also takes device-queue items for the given DevEUI into consideration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetNextDownlinkFCntForDevEUIResponse GetNextDownlinkFCntForDevEUI(global::chirpstack.ns.GetNextDownlinkFCntForDevEUIRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNextDownlinkFCntForDevEUI(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetNextDownlinkFCntForDevEUI returns the next FCnt that must be used.
      /// This also takes device-queue items for the given DevEUI into consideration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetNextDownlinkFCntForDevEUIResponse GetNextDownlinkFCntForDevEUI(global::chirpstack.ns.GetNextDownlinkFCntForDevEUIRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNextDownlinkFCntForDevEUI, null, options, request);
      }
      /// <summary>
      /// GetNextDownlinkFCntForDevEUI returns the next FCnt that must be used.
      /// This also takes device-queue items for the given DevEUI into consideration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetNextDownlinkFCntForDevEUIResponse> GetNextDownlinkFCntForDevEUIAsync(global::chirpstack.ns.GetNextDownlinkFCntForDevEUIRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNextDownlinkFCntForDevEUIAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetNextDownlinkFCntForDevEUI returns the next FCnt that must be used.
      /// This also takes device-queue items for the given DevEUI into consideration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetNextDownlinkFCntForDevEUIResponse> GetNextDownlinkFCntForDevEUIAsync(global::chirpstack.ns.GetNextDownlinkFCntForDevEUIRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNextDownlinkFCntForDevEUI, null, options, request);
      }
      /// <summary>
      /// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetRandomDevAddrResponse GetRandomDevAddr(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRandomDevAddr(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetRandomDevAddrResponse GetRandomDevAddr(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRandomDevAddr, null, options, request);
      }
      /// <summary>
      /// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetRandomDevAddrResponse> GetRandomDevAddrAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRandomDevAddrAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetRandomDevAddrResponse> GetRandomDevAddrAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRandomDevAddr, null, options, request);
      }
      /// <summary>
      /// CreateMACCommandQueueItem adds the downlink mac-command to the queue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CreateMACCommandQueueItem(global::chirpstack.ns.CreateMACCommandQueueItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMACCommandQueueItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateMACCommandQueueItem adds the downlink mac-command to the queue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CreateMACCommandQueueItem(global::chirpstack.ns.CreateMACCommandQueueItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateMACCommandQueueItem, null, options, request);
      }
      /// <summary>
      /// CreateMACCommandQueueItem adds the downlink mac-command to the queue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CreateMACCommandQueueItemAsync(global::chirpstack.ns.CreateMACCommandQueueItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMACCommandQueueItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateMACCommandQueueItem adds the downlink mac-command to the queue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CreateMACCommandQueueItemAsync(global::chirpstack.ns.CreateMACCommandQueueItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateMACCommandQueueItem, null, options, request);
      }
      /// <summary>
      /// SendProprietaryPayload send a payload using the 'Proprietary' LoRaWAN message-type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SendProprietaryPayload(global::chirpstack.ns.SendProprietaryPayloadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendProprietaryPayload(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SendProprietaryPayload send a payload using the 'Proprietary' LoRaWAN message-type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SendProprietaryPayload(global::chirpstack.ns.SendProprietaryPayloadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendProprietaryPayload, null, options, request);
      }
      /// <summary>
      /// SendProprietaryPayload send a payload using the 'Proprietary' LoRaWAN message-type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SendProprietaryPayloadAsync(global::chirpstack.ns.SendProprietaryPayloadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendProprietaryPayloadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SendProprietaryPayload send a payload using the 'Proprietary' LoRaWAN message-type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SendProprietaryPayloadAsync(global::chirpstack.ns.SendProprietaryPayloadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendProprietaryPayload, null, options, request);
      }
      /// <summary>
      /// CreateGateway creates the given gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CreateGateway(global::chirpstack.ns.CreateGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGateway(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateGateway creates the given gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CreateGateway(global::chirpstack.ns.CreateGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateGateway, null, options, request);
      }
      /// <summary>
      /// CreateGateway creates the given gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CreateGatewayAsync(global::chirpstack.ns.CreateGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGatewayAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateGateway creates the given gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CreateGatewayAsync(global::chirpstack.ns.CreateGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateGateway, null, options, request);
      }
      /// <summary>
      /// GetGateway returns data for a particular gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetGatewayResponse GetGateway(global::chirpstack.ns.GetGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGateway(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetGateway returns data for a particular gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetGatewayResponse GetGateway(global::chirpstack.ns.GetGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGateway, null, options, request);
      }
      /// <summary>
      /// GetGateway returns data for a particular gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetGatewayResponse> GetGatewayAsync(global::chirpstack.ns.GetGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGatewayAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetGateway returns data for a particular gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetGatewayResponse> GetGatewayAsync(global::chirpstack.ns.GetGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGateway, null, options, request);
      }
      /// <summary>
      /// UpdateGateway updates an existing gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateGateway(global::chirpstack.ns.UpdateGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGateway(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateGateway updates an existing gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateGateway(global::chirpstack.ns.UpdateGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGateway, null, options, request);
      }
      /// <summary>
      /// UpdateGateway updates an existing gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateGatewayAsync(global::chirpstack.ns.UpdateGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGatewayAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateGateway updates an existing gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateGatewayAsync(global::chirpstack.ns.UpdateGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGateway, null, options, request);
      }
      /// <summary>
      /// DeleteGateway deletes a gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteGateway(global::chirpstack.ns.DeleteGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGateway(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteGateway deletes a gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteGateway(global::chirpstack.ns.DeleteGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGateway, null, options, request);
      }
      /// <summary>
      /// DeleteGateway deletes a gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteGatewayAsync(global::chirpstack.ns.DeleteGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGatewayAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteGateway deletes a gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteGatewayAsync(global::chirpstack.ns.DeleteGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGateway, null, options, request);
      }
      /// <summary>
      /// GenerateGatewayClientCertificate returns TLS certificate gateway authentication / authorization.
      /// This endpoint can ony be used when ChirpStack Network Server is configured with a gateway
      /// CA certificate and key, which is used for signing the TLS certificate. The returned TLS
      /// certificate will have the Gateway ID as Common Name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GenerateGatewayClientCertificateResponse GenerateGatewayClientCertificate(global::chirpstack.ns.GenerateGatewayClientCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateGatewayClientCertificate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GenerateGatewayClientCertificate returns TLS certificate gateway authentication / authorization.
      /// This endpoint can ony be used when ChirpStack Network Server is configured with a gateway
      /// CA certificate and key, which is used for signing the TLS certificate. The returned TLS
      /// certificate will have the Gateway ID as Common Name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GenerateGatewayClientCertificateResponse GenerateGatewayClientCertificate(global::chirpstack.ns.GenerateGatewayClientCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateGatewayClientCertificate, null, options, request);
      }
      /// <summary>
      /// GenerateGatewayClientCertificate returns TLS certificate gateway authentication / authorization.
      /// This endpoint can ony be used when ChirpStack Network Server is configured with a gateway
      /// CA certificate and key, which is used for signing the TLS certificate. The returned TLS
      /// certificate will have the Gateway ID as Common Name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GenerateGatewayClientCertificateResponse> GenerateGatewayClientCertificateAsync(global::chirpstack.ns.GenerateGatewayClientCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateGatewayClientCertificateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GenerateGatewayClientCertificate returns TLS certificate gateway authentication / authorization.
      /// This endpoint can ony be used when ChirpStack Network Server is configured with a gateway
      /// CA certificate and key, which is used for signing the TLS certificate. The returned TLS
      /// certificate will have the Gateway ID as Common Name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GenerateGatewayClientCertificateResponse> GenerateGatewayClientCertificateAsync(global::chirpstack.ns.GenerateGatewayClientCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateGatewayClientCertificate, null, options, request);
      }
      /// <summary>
      /// CreateGatewayProfile creates the given gateway-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.CreateGatewayProfileResponse CreateGatewayProfile(global::chirpstack.ns.CreateGatewayProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGatewayProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateGatewayProfile creates the given gateway-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.CreateGatewayProfileResponse CreateGatewayProfile(global::chirpstack.ns.CreateGatewayProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateGatewayProfile, null, options, request);
      }
      /// <summary>
      /// CreateGatewayProfile creates the given gateway-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.CreateGatewayProfileResponse> CreateGatewayProfileAsync(global::chirpstack.ns.CreateGatewayProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGatewayProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateGatewayProfile creates the given gateway-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.CreateGatewayProfileResponse> CreateGatewayProfileAsync(global::chirpstack.ns.CreateGatewayProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateGatewayProfile, null, options, request);
      }
      /// <summary>
      /// GetGatewayProfile returns the gateway-profile given an id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetGatewayProfileResponse GetGatewayProfile(global::chirpstack.ns.GetGatewayProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGatewayProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetGatewayProfile returns the gateway-profile given an id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetGatewayProfileResponse GetGatewayProfile(global::chirpstack.ns.GetGatewayProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGatewayProfile, null, options, request);
      }
      /// <summary>
      /// GetGatewayProfile returns the gateway-profile given an id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetGatewayProfileResponse> GetGatewayProfileAsync(global::chirpstack.ns.GetGatewayProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGatewayProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetGatewayProfile returns the gateway-profile given an id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetGatewayProfileResponse> GetGatewayProfileAsync(global::chirpstack.ns.GetGatewayProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGatewayProfile, null, options, request);
      }
      /// <summary>
      /// UpdateGatewayProfile updates the given gateway-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateGatewayProfile(global::chirpstack.ns.UpdateGatewayProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGatewayProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateGatewayProfile updates the given gateway-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateGatewayProfile(global::chirpstack.ns.UpdateGatewayProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGatewayProfile, null, options, request);
      }
      /// <summary>
      /// UpdateGatewayProfile updates the given gateway-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateGatewayProfileAsync(global::chirpstack.ns.UpdateGatewayProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGatewayProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateGatewayProfile updates the given gateway-profile.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateGatewayProfileAsync(global::chirpstack.ns.UpdateGatewayProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGatewayProfile, null, options, request);
      }
      /// <summary>
      /// DeleteGatewayProfile deletes the gateway-profile matching a given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteGatewayProfile(global::chirpstack.ns.DeleteGatewayProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGatewayProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteGatewayProfile deletes the gateway-profile matching a given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteGatewayProfile(global::chirpstack.ns.DeleteGatewayProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGatewayProfile, null, options, request);
      }
      /// <summary>
      /// DeleteGatewayProfile deletes the gateway-profile matching a given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteGatewayProfileAsync(global::chirpstack.ns.DeleteGatewayProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGatewayProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteGatewayProfile deletes the gateway-profile matching a given id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteGatewayProfileAsync(global::chirpstack.ns.DeleteGatewayProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGatewayProfile, null, options, request);
      }
      /// <summary>
      /// GetGatewayStats returns stats of an existing gateway.
      /// Deprecated (stats are forwarded to Application Server API).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetGatewayStatsResponse GetGatewayStats(global::chirpstack.ns.GetGatewayStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGatewayStats(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetGatewayStats returns stats of an existing gateway.
      /// Deprecated (stats are forwarded to Application Server API).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetGatewayStatsResponse GetGatewayStats(global::chirpstack.ns.GetGatewayStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGatewayStats, null, options, request);
      }
      /// <summary>
      /// GetGatewayStats returns stats of an existing gateway.
      /// Deprecated (stats are forwarded to Application Server API).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetGatewayStatsResponse> GetGatewayStatsAsync(global::chirpstack.ns.GetGatewayStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGatewayStatsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetGatewayStats returns stats of an existing gateway.
      /// Deprecated (stats are forwarded to Application Server API).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetGatewayStatsResponse> GetGatewayStatsAsync(global::chirpstack.ns.GetGatewayStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGatewayStats, null, options, request);
      }
      /// <summary>
      /// StreamFrameLogsForGateway returns a stream of frames seen by the given gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::chirpstack.ns.StreamFrameLogsForGatewayResponse> StreamFrameLogsForGateway(global::chirpstack.ns.StreamFrameLogsForGatewayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamFrameLogsForGateway(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamFrameLogsForGateway returns a stream of frames seen by the given gateway.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::chirpstack.ns.StreamFrameLogsForGatewayResponse> StreamFrameLogsForGateway(global::chirpstack.ns.StreamFrameLogsForGatewayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamFrameLogsForGateway, null, options, request);
      }
      /// <summary>
      /// StreamFrameLogsForDevice returns a stream of frames seen by the given device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::chirpstack.ns.StreamFrameLogsForDeviceResponse> StreamFrameLogsForDevice(global::chirpstack.ns.StreamFrameLogsForDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamFrameLogsForDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamFrameLogsForDevice returns a stream of frames seen by the given device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::chirpstack.ns.StreamFrameLogsForDeviceResponse> StreamFrameLogsForDevice(global::chirpstack.ns.StreamFrameLogsForDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamFrameLogsForDevice, null, options, request);
      }
      /// <summary>
      /// CreateMulticastGroup creates the given multicast-group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.CreateMulticastGroupResponse CreateMulticastGroup(global::chirpstack.ns.CreateMulticastGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMulticastGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateMulticastGroup creates the given multicast-group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.CreateMulticastGroupResponse CreateMulticastGroup(global::chirpstack.ns.CreateMulticastGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateMulticastGroup, null, options, request);
      }
      /// <summary>
      /// CreateMulticastGroup creates the given multicast-group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.CreateMulticastGroupResponse> CreateMulticastGroupAsync(global::chirpstack.ns.CreateMulticastGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMulticastGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateMulticastGroup creates the given multicast-group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.CreateMulticastGroupResponse> CreateMulticastGroupAsync(global::chirpstack.ns.CreateMulticastGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateMulticastGroup, null, options, request);
      }
      /// <summary>
      /// GetMulticastGroup returns the multicast-group given an id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetMulticastGroupResponse GetMulticastGroup(global::chirpstack.ns.GetMulticastGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMulticastGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetMulticastGroup returns the multicast-group given an id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetMulticastGroupResponse GetMulticastGroup(global::chirpstack.ns.GetMulticastGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMulticastGroup, null, options, request);
      }
      /// <summary>
      /// GetMulticastGroup returns the multicast-group given an id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetMulticastGroupResponse> GetMulticastGroupAsync(global::chirpstack.ns.GetMulticastGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMulticastGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetMulticastGroup returns the multicast-group given an id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetMulticastGroupResponse> GetMulticastGroupAsync(global::chirpstack.ns.GetMulticastGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMulticastGroup, null, options, request);
      }
      /// <summary>
      /// UpdateMulticastGroup updates the given multicast-group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateMulticastGroup(global::chirpstack.ns.UpdateMulticastGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMulticastGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateMulticastGroup updates the given multicast-group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateMulticastGroup(global::chirpstack.ns.UpdateMulticastGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateMulticastGroup, null, options, request);
      }
      /// <summary>
      /// UpdateMulticastGroup updates the given multicast-group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateMulticastGroupAsync(global::chirpstack.ns.UpdateMulticastGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMulticastGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateMulticastGroup updates the given multicast-group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateMulticastGroupAsync(global::chirpstack.ns.UpdateMulticastGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateMulticastGroup, null, options, request);
      }
      /// <summary>
      /// DeleteMulticastGroup deletes a multicast-group given an id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteMulticastGroup(global::chirpstack.ns.DeleteMulticastGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMulticastGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteMulticastGroup deletes a multicast-group given an id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteMulticastGroup(global::chirpstack.ns.DeleteMulticastGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteMulticastGroup, null, options, request);
      }
      /// <summary>
      /// DeleteMulticastGroup deletes a multicast-group given an id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteMulticastGroupAsync(global::chirpstack.ns.DeleteMulticastGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMulticastGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteMulticastGroup deletes a multicast-group given an id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteMulticastGroupAsync(global::chirpstack.ns.DeleteMulticastGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteMulticastGroup, null, options, request);
      }
      /// <summary>
      /// AddDeviceToMulticastGroup adds the given device to the given multicast-group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty AddDeviceToMulticastGroup(global::chirpstack.ns.AddDeviceToMulticastGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddDeviceToMulticastGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AddDeviceToMulticastGroup adds the given device to the given multicast-group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty AddDeviceToMulticastGroup(global::chirpstack.ns.AddDeviceToMulticastGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddDeviceToMulticastGroup, null, options, request);
      }
      /// <summary>
      /// AddDeviceToMulticastGroup adds the given device to the given multicast-group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> AddDeviceToMulticastGroupAsync(global::chirpstack.ns.AddDeviceToMulticastGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddDeviceToMulticastGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AddDeviceToMulticastGroup adds the given device to the given multicast-group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> AddDeviceToMulticastGroupAsync(global::chirpstack.ns.AddDeviceToMulticastGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddDeviceToMulticastGroup, null, options, request);
      }
      /// <summary>
      /// RemoveDeviceFromMulticastGroup removes the given device from the given multicast-group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty RemoveDeviceFromMulticastGroup(global::chirpstack.ns.RemoveDeviceFromMulticastGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveDeviceFromMulticastGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RemoveDeviceFromMulticastGroup removes the given device from the given multicast-group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty RemoveDeviceFromMulticastGroup(global::chirpstack.ns.RemoveDeviceFromMulticastGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveDeviceFromMulticastGroup, null, options, request);
      }
      /// <summary>
      /// RemoveDeviceFromMulticastGroup removes the given device from the given multicast-group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RemoveDeviceFromMulticastGroupAsync(global::chirpstack.ns.RemoveDeviceFromMulticastGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveDeviceFromMulticastGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RemoveDeviceFromMulticastGroup removes the given device from the given multicast-group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RemoveDeviceFromMulticastGroupAsync(global::chirpstack.ns.RemoveDeviceFromMulticastGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveDeviceFromMulticastGroup, null, options, request);
      }
      /// <summary>
      /// EnqueueMulticastQueueItem enqueues the given multicast queue-item and
      /// increments the frame-counter after enqueueing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty EnqueueMulticastQueueItem(global::chirpstack.ns.EnqueueMulticastQueueItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnqueueMulticastQueueItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EnqueueMulticastQueueItem enqueues the given multicast queue-item and
      /// increments the frame-counter after enqueueing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty EnqueueMulticastQueueItem(global::chirpstack.ns.EnqueueMulticastQueueItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EnqueueMulticastQueueItem, null, options, request);
      }
      /// <summary>
      /// EnqueueMulticastQueueItem enqueues the given multicast queue-item and
      /// increments the frame-counter after enqueueing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> EnqueueMulticastQueueItemAsync(global::chirpstack.ns.EnqueueMulticastQueueItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnqueueMulticastQueueItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EnqueueMulticastQueueItem enqueues the given multicast queue-item and
      /// increments the frame-counter after enqueueing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> EnqueueMulticastQueueItemAsync(global::chirpstack.ns.EnqueueMulticastQueueItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EnqueueMulticastQueueItem, null, options, request);
      }
      /// <summary>
      /// FlushMulticastQueueForMulticastGroup flushes the multicast device-queue given a multicast-group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty FlushMulticastQueueForMulticastGroup(global::chirpstack.ns.FlushMulticastQueueForMulticastGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FlushMulticastQueueForMulticastGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FlushMulticastQueueForMulticastGroup flushes the multicast device-queue given a multicast-group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty FlushMulticastQueueForMulticastGroup(global::chirpstack.ns.FlushMulticastQueueForMulticastGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FlushMulticastQueueForMulticastGroup, null, options, request);
      }
      /// <summary>
      /// FlushMulticastQueueForMulticastGroup flushes the multicast device-queue given a multicast-group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> FlushMulticastQueueForMulticastGroupAsync(global::chirpstack.ns.FlushMulticastQueueForMulticastGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FlushMulticastQueueForMulticastGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FlushMulticastQueueForMulticastGroup flushes the multicast device-queue given a multicast-group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> FlushMulticastQueueForMulticastGroupAsync(global::chirpstack.ns.FlushMulticastQueueForMulticastGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FlushMulticastQueueForMulticastGroup, null, options, request);
      }
      /// <summary>
      /// GetMulticastQueueItemsForMulticastGroup returns the queue-items given a multicast-group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupResponse GetMulticastQueueItemsForMulticastGroup(global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMulticastQueueItemsForMulticastGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetMulticastQueueItemsForMulticastGroup returns the queue-items given a multicast-group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupResponse GetMulticastQueueItemsForMulticastGroup(global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMulticastQueueItemsForMulticastGroup, null, options, request);
      }
      /// <summary>
      /// GetMulticastQueueItemsForMulticastGroup returns the queue-items given a multicast-group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupResponse> GetMulticastQueueItemsForMulticastGroupAsync(global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMulticastQueueItemsForMulticastGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetMulticastQueueItemsForMulticastGroup returns the queue-items given a multicast-group id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupResponse> GetMulticastQueueItemsForMulticastGroupAsync(global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMulticastQueueItemsForMulticastGroup, null, options, request);
      }
      /// <summary>
      /// GetVersion returns the ChirpStack Network Server version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetVersionResponse GetVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetVersion returns the ChirpStack Network Server version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetVersionResponse GetVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVersion, null, options, request);
      }
      /// <summary>
      /// GetVersion returns the ChirpStack Network Server version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetVersionResponse> GetVersionAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetVersion returns the ChirpStack Network Server version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetVersionResponse> GetVersionAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVersion, null, options, request);
      }
      /// <summary>
      /// GetADRAlgorithms returns the available ADR algorithms.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetADRAlgorithmsResponse GetADRAlgorithms(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetADRAlgorithms(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetADRAlgorithms returns the available ADR algorithms.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::chirpstack.ns.GetADRAlgorithmsResponse GetADRAlgorithms(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetADRAlgorithms, null, options, request);
      }
      /// <summary>
      /// GetADRAlgorithms returns the available ADR algorithms.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetADRAlgorithmsResponse> GetADRAlgorithmsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetADRAlgorithmsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetADRAlgorithms returns the available ADR algorithms.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::chirpstack.ns.GetADRAlgorithmsResponse> GetADRAlgorithmsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetADRAlgorithms, null, options, request);
      }
      /// <summary>
      /// StreamGlobalFrameLogsForGateway returns a stream of frames seen by the gateways.
      /// logging of uplink and downlink frames for gateways to a Redis Stream for external logging and monitoring purposes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::chirpstack.ns.StreamGlobalFrameLogsForGatewayResponse> StreamGlobalFrameLogsForGateway(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamGlobalFrameLogsForGateway(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamGlobalFrameLogsForGateway returns a stream of frames seen by the gateways.
      /// logging of uplink and downlink frames for gateways to a Redis Stream for external logging and monitoring purposes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::chirpstack.ns.StreamGlobalFrameLogsForGatewayResponse> StreamGlobalFrameLogsForGateway(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamGlobalFrameLogsForGateway, null, options, request);
      }
      /// <summary>
      /// StreamGlobalFrameLogsForDevice returns a stream of frames seen by the devices.
      /// logging of uplink and downlink frames for devices to a Redis Stream for external logging and monitoring purposes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::chirpstack.ns.StreamGlobalFrameLogsForDeviceResponse> StreamGlobalFrameLogsForDevice(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamGlobalFrameLogsForDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamGlobalFrameLogsForDevice returns a stream of frames seen by the devices.
      /// logging of uplink and downlink frames for devices to a Redis Stream for external logging and monitoring purposes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::chirpstack.ns.StreamGlobalFrameLogsForDeviceResponse> StreamGlobalFrameLogsForDevice(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamGlobalFrameLogsForDevice, null, options, request);
      }
      /// <summary>
      /// ClearDeviceDevNonce clear device devnonce from activation records.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ClearDeviceDevNonce(global::chirpstack.ns.ClearDeviceDevNonceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClearDeviceDevNonce(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ClearDeviceDevNonce clear device devnonce from activation records.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ClearDeviceDevNonce(global::chirpstack.ns.ClearDeviceDevNonceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClearDeviceDevNonce, null, options, request);
      }
      /// <summary>
      /// ClearDeviceDevNonce clear device devnonce from activation records.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ClearDeviceDevNonceAsync(global::chirpstack.ns.ClearDeviceDevNonceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClearDeviceDevNonceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ClearDeviceDevNonce clear device devnonce from activation records.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ClearDeviceDevNonceAsync(global::chirpstack.ns.ClearDeviceDevNonceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClearDeviceDevNonce, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override NetworkServerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NetworkServerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(NetworkServerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateServiceProfile, serviceImpl.CreateServiceProfile)
          .AddMethod(__Method_GetServiceProfile, serviceImpl.GetServiceProfile)
          .AddMethod(__Method_UpdateServiceProfile, serviceImpl.UpdateServiceProfile)
          .AddMethod(__Method_DeleteServiceProfile, serviceImpl.DeleteServiceProfile)
          .AddMethod(__Method_CreateRoutingProfile, serviceImpl.CreateRoutingProfile)
          .AddMethod(__Method_GetRoutingProfile, serviceImpl.GetRoutingProfile)
          .AddMethod(__Method_UpdateRoutingProfile, serviceImpl.UpdateRoutingProfile)
          .AddMethod(__Method_DeleteRoutingProfile, serviceImpl.DeleteRoutingProfile)
          .AddMethod(__Method_CreateDeviceProfile, serviceImpl.CreateDeviceProfile)
          .AddMethod(__Method_GetDeviceProfile, serviceImpl.GetDeviceProfile)
          .AddMethod(__Method_UpdateDeviceProfile, serviceImpl.UpdateDeviceProfile)
          .AddMethod(__Method_DeleteDeviceProfile, serviceImpl.DeleteDeviceProfile)
          .AddMethod(__Method_CreateDevice, serviceImpl.CreateDevice)
          .AddMethod(__Method_GetDevice, serviceImpl.GetDevice)
          .AddMethod(__Method_UpdateDevice, serviceImpl.UpdateDevice)
          .AddMethod(__Method_DeleteDevice, serviceImpl.DeleteDevice)
          .AddMethod(__Method_ActivateDevice, serviceImpl.ActivateDevice)
          .AddMethod(__Method_DeactivateDevice, serviceImpl.DeactivateDevice)
          .AddMethod(__Method_GetDeviceActivation, serviceImpl.GetDeviceActivation)
          .AddMethod(__Method_CreateDeviceQueueItem, serviceImpl.CreateDeviceQueueItem)
          .AddMethod(__Method_FlushDeviceQueueForDevEUI, serviceImpl.FlushDeviceQueueForDevEUI)
          .AddMethod(__Method_GetDeviceQueueItemsForDevEUI, serviceImpl.GetDeviceQueueItemsForDevEUI)
          .AddMethod(__Method_GetNextDownlinkFCntForDevEUI, serviceImpl.GetNextDownlinkFCntForDevEUI)
          .AddMethod(__Method_GetRandomDevAddr, serviceImpl.GetRandomDevAddr)
          .AddMethod(__Method_CreateMACCommandQueueItem, serviceImpl.CreateMACCommandQueueItem)
          .AddMethod(__Method_SendProprietaryPayload, serviceImpl.SendProprietaryPayload)
          .AddMethod(__Method_CreateGateway, serviceImpl.CreateGateway)
          .AddMethod(__Method_GetGateway, serviceImpl.GetGateway)
          .AddMethod(__Method_UpdateGateway, serviceImpl.UpdateGateway)
          .AddMethod(__Method_DeleteGateway, serviceImpl.DeleteGateway)
          .AddMethod(__Method_GenerateGatewayClientCertificate, serviceImpl.GenerateGatewayClientCertificate)
          .AddMethod(__Method_CreateGatewayProfile, serviceImpl.CreateGatewayProfile)
          .AddMethod(__Method_GetGatewayProfile, serviceImpl.GetGatewayProfile)
          .AddMethod(__Method_UpdateGatewayProfile, serviceImpl.UpdateGatewayProfile)
          .AddMethod(__Method_DeleteGatewayProfile, serviceImpl.DeleteGatewayProfile)
          .AddMethod(__Method_GetGatewayStats, serviceImpl.GetGatewayStats)
          .AddMethod(__Method_StreamFrameLogsForGateway, serviceImpl.StreamFrameLogsForGateway)
          .AddMethod(__Method_StreamFrameLogsForDevice, serviceImpl.StreamFrameLogsForDevice)
          .AddMethod(__Method_CreateMulticastGroup, serviceImpl.CreateMulticastGroup)
          .AddMethod(__Method_GetMulticastGroup, serviceImpl.GetMulticastGroup)
          .AddMethod(__Method_UpdateMulticastGroup, serviceImpl.UpdateMulticastGroup)
          .AddMethod(__Method_DeleteMulticastGroup, serviceImpl.DeleteMulticastGroup)
          .AddMethod(__Method_AddDeviceToMulticastGroup, serviceImpl.AddDeviceToMulticastGroup)
          .AddMethod(__Method_RemoveDeviceFromMulticastGroup, serviceImpl.RemoveDeviceFromMulticastGroup)
          .AddMethod(__Method_EnqueueMulticastQueueItem, serviceImpl.EnqueueMulticastQueueItem)
          .AddMethod(__Method_FlushMulticastQueueForMulticastGroup, serviceImpl.FlushMulticastQueueForMulticastGroup)
          .AddMethod(__Method_GetMulticastQueueItemsForMulticastGroup, serviceImpl.GetMulticastQueueItemsForMulticastGroup)
          .AddMethod(__Method_GetVersion, serviceImpl.GetVersion)
          .AddMethod(__Method_GetADRAlgorithms, serviceImpl.GetADRAlgorithms)
          .AddMethod(__Method_StreamGlobalFrameLogsForGateway, serviceImpl.StreamGlobalFrameLogsForGateway)
          .AddMethod(__Method_StreamGlobalFrameLogsForDevice, serviceImpl.StreamGlobalFrameLogsForDevice)
          .AddMethod(__Method_ClearDeviceDevNonce, serviceImpl.ClearDeviceDevNonce).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NetworkServerServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateServiceProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.CreateServiceProfileRequest, global::chirpstack.ns.CreateServiceProfileResponse>(serviceImpl.CreateServiceProfile));
      serviceBinder.AddMethod(__Method_GetServiceProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.GetServiceProfileRequest, global::chirpstack.ns.GetServiceProfileResponse>(serviceImpl.GetServiceProfile));
      serviceBinder.AddMethod(__Method_UpdateServiceProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.UpdateServiceProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.UpdateServiceProfile));
      serviceBinder.AddMethod(__Method_DeleteServiceProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.DeleteServiceProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteServiceProfile));
      serviceBinder.AddMethod(__Method_CreateRoutingProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.CreateRoutingProfileRequest, global::chirpstack.ns.CreateRoutingProfileResponse>(serviceImpl.CreateRoutingProfile));
      serviceBinder.AddMethod(__Method_GetRoutingProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.GetRoutingProfileRequest, global::chirpstack.ns.GetRoutingProfileResponse>(serviceImpl.GetRoutingProfile));
      serviceBinder.AddMethod(__Method_UpdateRoutingProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.UpdateRoutingProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.UpdateRoutingProfile));
      serviceBinder.AddMethod(__Method_DeleteRoutingProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.DeleteRoutingProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteRoutingProfile));
      serviceBinder.AddMethod(__Method_CreateDeviceProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.CreateDeviceProfileRequest, global::chirpstack.ns.CreateDeviceProfileResponse>(serviceImpl.CreateDeviceProfile));
      serviceBinder.AddMethod(__Method_GetDeviceProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.GetDeviceProfileRequest, global::chirpstack.ns.GetDeviceProfileResponse>(serviceImpl.GetDeviceProfile));
      serviceBinder.AddMethod(__Method_UpdateDeviceProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.UpdateDeviceProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.UpdateDeviceProfile));
      serviceBinder.AddMethod(__Method_DeleteDeviceProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.DeleteDeviceProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteDeviceProfile));
      serviceBinder.AddMethod(__Method_CreateDevice, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.CreateDeviceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.CreateDevice));
      serviceBinder.AddMethod(__Method_GetDevice, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.GetDeviceRequest, global::chirpstack.ns.GetDeviceResponse>(serviceImpl.GetDevice));
      serviceBinder.AddMethod(__Method_UpdateDevice, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.UpdateDeviceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.UpdateDevice));
      serviceBinder.AddMethod(__Method_DeleteDevice, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.DeleteDeviceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteDevice));
      serviceBinder.AddMethod(__Method_ActivateDevice, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.ActivateDeviceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.ActivateDevice));
      serviceBinder.AddMethod(__Method_DeactivateDevice, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.DeactivateDeviceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeactivateDevice));
      serviceBinder.AddMethod(__Method_GetDeviceActivation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.GetDeviceActivationRequest, global::chirpstack.ns.GetDeviceActivationResponse>(serviceImpl.GetDeviceActivation));
      serviceBinder.AddMethod(__Method_CreateDeviceQueueItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.CreateDeviceQueueItemRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.CreateDeviceQueueItem));
      serviceBinder.AddMethod(__Method_FlushDeviceQueueForDevEUI, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.FlushDeviceQueueForDevEUIRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.FlushDeviceQueueForDevEUI));
      serviceBinder.AddMethod(__Method_GetDeviceQueueItemsForDevEUI, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.GetDeviceQueueItemsForDevEUIRequest, global::chirpstack.ns.GetDeviceQueueItemsForDevEUIResponse>(serviceImpl.GetDeviceQueueItemsForDevEUI));
      serviceBinder.AddMethod(__Method_GetNextDownlinkFCntForDevEUI, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.GetNextDownlinkFCntForDevEUIRequest, global::chirpstack.ns.GetNextDownlinkFCntForDevEUIResponse>(serviceImpl.GetNextDownlinkFCntForDevEUI));
      serviceBinder.AddMethod(__Method_GetRandomDevAddr, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::chirpstack.ns.GetRandomDevAddrResponse>(serviceImpl.GetRandomDevAddr));
      serviceBinder.AddMethod(__Method_CreateMACCommandQueueItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.CreateMACCommandQueueItemRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.CreateMACCommandQueueItem));
      serviceBinder.AddMethod(__Method_SendProprietaryPayload, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.SendProprietaryPayloadRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.SendProprietaryPayload));
      serviceBinder.AddMethod(__Method_CreateGateway, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.CreateGatewayRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.CreateGateway));
      serviceBinder.AddMethod(__Method_GetGateway, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.GetGatewayRequest, global::chirpstack.ns.GetGatewayResponse>(serviceImpl.GetGateway));
      serviceBinder.AddMethod(__Method_UpdateGateway, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.UpdateGatewayRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.UpdateGateway));
      serviceBinder.AddMethod(__Method_DeleteGateway, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.DeleteGatewayRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteGateway));
      serviceBinder.AddMethod(__Method_GenerateGatewayClientCertificate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.GenerateGatewayClientCertificateRequest, global::chirpstack.ns.GenerateGatewayClientCertificateResponse>(serviceImpl.GenerateGatewayClientCertificate));
      serviceBinder.AddMethod(__Method_CreateGatewayProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.CreateGatewayProfileRequest, global::chirpstack.ns.CreateGatewayProfileResponse>(serviceImpl.CreateGatewayProfile));
      serviceBinder.AddMethod(__Method_GetGatewayProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.GetGatewayProfileRequest, global::chirpstack.ns.GetGatewayProfileResponse>(serviceImpl.GetGatewayProfile));
      serviceBinder.AddMethod(__Method_UpdateGatewayProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.UpdateGatewayProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.UpdateGatewayProfile));
      serviceBinder.AddMethod(__Method_DeleteGatewayProfile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.DeleteGatewayProfileRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteGatewayProfile));
      serviceBinder.AddMethod(__Method_GetGatewayStats, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.GetGatewayStatsRequest, global::chirpstack.ns.GetGatewayStatsResponse>(serviceImpl.GetGatewayStats));
      serviceBinder.AddMethod(__Method_StreamFrameLogsForGateway, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::chirpstack.ns.StreamFrameLogsForGatewayRequest, global::chirpstack.ns.StreamFrameLogsForGatewayResponse>(serviceImpl.StreamFrameLogsForGateway));
      serviceBinder.AddMethod(__Method_StreamFrameLogsForDevice, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::chirpstack.ns.StreamFrameLogsForDeviceRequest, global::chirpstack.ns.StreamFrameLogsForDeviceResponse>(serviceImpl.StreamFrameLogsForDevice));
      serviceBinder.AddMethod(__Method_CreateMulticastGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.CreateMulticastGroupRequest, global::chirpstack.ns.CreateMulticastGroupResponse>(serviceImpl.CreateMulticastGroup));
      serviceBinder.AddMethod(__Method_GetMulticastGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.GetMulticastGroupRequest, global::chirpstack.ns.GetMulticastGroupResponse>(serviceImpl.GetMulticastGroup));
      serviceBinder.AddMethod(__Method_UpdateMulticastGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.UpdateMulticastGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.UpdateMulticastGroup));
      serviceBinder.AddMethod(__Method_DeleteMulticastGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.DeleteMulticastGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteMulticastGroup));
      serviceBinder.AddMethod(__Method_AddDeviceToMulticastGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.AddDeviceToMulticastGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.AddDeviceToMulticastGroup));
      serviceBinder.AddMethod(__Method_RemoveDeviceFromMulticastGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.RemoveDeviceFromMulticastGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.RemoveDeviceFromMulticastGroup));
      serviceBinder.AddMethod(__Method_EnqueueMulticastQueueItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.EnqueueMulticastQueueItemRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.EnqueueMulticastQueueItem));
      serviceBinder.AddMethod(__Method_FlushMulticastQueueForMulticastGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.FlushMulticastQueueForMulticastGroupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.FlushMulticastQueueForMulticastGroup));
      serviceBinder.AddMethod(__Method_GetMulticastQueueItemsForMulticastGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupRequest, global::chirpstack.ns.GetMulticastQueueItemsForMulticastGroupResponse>(serviceImpl.GetMulticastQueueItemsForMulticastGroup));
      serviceBinder.AddMethod(__Method_GetVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::chirpstack.ns.GetVersionResponse>(serviceImpl.GetVersion));
      serviceBinder.AddMethod(__Method_GetADRAlgorithms, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::chirpstack.ns.GetADRAlgorithmsResponse>(serviceImpl.GetADRAlgorithms));
      serviceBinder.AddMethod(__Method_StreamGlobalFrameLogsForGateway, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::chirpstack.ns.StreamGlobalFrameLogsForGatewayResponse>(serviceImpl.StreamGlobalFrameLogsForGateway));
      serviceBinder.AddMethod(__Method_StreamGlobalFrameLogsForDevice, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::chirpstack.ns.StreamGlobalFrameLogsForDeviceResponse>(serviceImpl.StreamGlobalFrameLogsForDevice));
      serviceBinder.AddMethod(__Method_ClearDeviceDevNonce, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::chirpstack.ns.ClearDeviceDevNonceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.ClearDeviceDevNonce));
    }

  }
}
#endregion
